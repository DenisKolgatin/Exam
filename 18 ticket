# 1. Понятия массива, списка, коллекции. Семантическая связь с понятиями класса и объекта
## Массивы
Массив - структура данных, хранящая набор значений (элементов массива), идентифицируемых по индексу или набору индексов, принимающих целые (или приводимые к целым) значения из некоторого заданного непрерывного диапазона. Одномерный массив можно рассматривать как реализацию абстрактного типа данных — вектор.
Размерность массива — это количество индексов, необходимое для однозначной адресации элемента в рамках массива. По количеству используемых индексов массивы делятся на одномерные, двумерные, трёхмерные и т. д.
Форма или структура массива — сведения о количестве размерностей и размере (протяжённости) массива по каждой из размерностей. Создание массивов представлено на рисунке 1.

![pic1](https://github.com/isagel/popova-page/blob/master/18.1.1.png?raw=true)

_Рис. 1. Создание массивов_

## Списки
В информатике, список - это абстрактный тип данных, представляющий собой упорядоченный набор значений, в котором некоторое значение может встречаться более одного раза. Экземпляр списка является компьютерной реализацией математического понятия конечной последовательности. Экземпляры значений, находящихся в списке, называются элементами списка. Если значение встречается несколько раз, каждое вхождение считается отдельным элементом. Создание списка представлено на рисунке 2.

![pic2](https://github.com/isagel/popova-page/blob/master/18.2.1.png?raw=true)

_Рис. 2. Создание списка_

## Коллекции
Коллекция в программировании — программный объект, содержащий в себе, тем или иным образом, набор значений одного или различных типов, и позволяющий обращаться к этим значениям.
Коллекция позволяет записывать в себя значения и извлекать их. Назначение коллекции — служить хранилищем объектов и обеспечивать доступ к ним. Обычно коллекции используются для хранения групп однотипных объектов, подлежащих стереотипной обработке. Для обращения к конкретному элементу коллекции могут использоваться различные методы, в зависимости от её логической организации. Реализация может допускать выполнение отдельных операций над коллекциями в целом. Наличие операций над коллекциями во многих случаях может существенно упростить программирование.
В качестве примера, рассмотрим  использование коллекций в языке C#. В C# коллекция представляет собой совокупность объектов. В среде .NET Framework имеется немало интерфейсов и классов, в которых определяются и реализуются различные типы коллекций. Коллекции упрощают решение многих задач программирования благодаря тому, что предлагают готовые решения для создания целого ряда типичных, но порой трудоемких для разработки структур данных. Например, в среду .NET Framework встроены коллекции, предназначенные для поддержки динамических массивов, связных списков, стеков, очередей и хеш-таблиц. Коллекции являются современным технологическим средством, заслуживающим пристального внимания всех, кто программирует на C#. Использование простой коллекции представлено на рисунке 3. В приведенном ниже примере создается список строк, а затем выполняется перебор строк с помощью оператора foreach.

![pic3](https://github.com/isagel/popova-page/blob/master/18.3.1.png?raw=true)

_Рис. 3. Использование коллекций_

В среде .NET Framework поддерживаются пять типов коллекций: необобщенные, специальные, с поразрядной организацией, обобщенные и параллельные. Рассмотрим каждую из них подробнее.
### Необобщенные коллекции
Реализуют ряд основных структур данных, включая динамический массив, стек, очередь, а также словари, в которых можно хранить пары "ключ-значение". В отношении необобщенных коллекций важно иметь в виду следующее: они оперируют данными типа object. Таким образом, необобщенные коллекции могут служить для хранения данных любого типа, причем в одной коллекции допускается наличие разнотипных данных. Очевидно, что такие коллекции не типизированы, поскольку в них хранятся ссылки на данные типа object. Классы и интерфейсы необобщенных коллекций находятся в пространстве имен System.Collections.
### Специальные коллекции
Оперируют данными конкретного типа или же делают это каким-то особым образом. Например, имеются специальные коллекции для символьных строк, а также специальные коллекции, в которых используется однонаправленный список. Специальные коллекции объявляются в пространстве имен System.Collections.Specialized.
### Поразрядная коллекция
В прикладном интерфейсе Collections API определена одна коллекция с поразрядной организацией — это BitArray. Коллекция типа BitArray поддерживает поразрядные операции, т.е. операции над отдельными двоичными разрядами, например И, ИЛИ, исключающее ИЛИ, а следовательно, она существенно отличается своими возможностями от остальных типов коллекций. Коллекция типа BitArray объявляется в пространстве имен System.Collections.
### Обобщенные коллекции
Обеспечивают обобщенную реализацию нескольких стандартных структур данных, включая связные списки, стеки, очереди и словари. Такие коллекции являются типизированными в силу их обобщенного характера. Это означает, что в обобщенной коллекции могут храниться только такие элементы данных, которые совместимы по типу с данной коллекцией. Благодаря этому исключается случайное несовпадение типов. Обобщенные коллекции объявляются в пространстве имен System.Collections.Generic.
### Параллельные коллекции
Поддерживают многопоточный доступ к коллекции. Это обобщенные коллекции, определенные в пространстве имен System.Collections.Concurrent.
## Классы и объекты
ООП привносит нам два ключевых понятия: Класс и Объект. Класс – это абстрактный тип данных. С помощью класса описывается некоторая сущность (ее характеристики и возможные действия). Например, класс может описывать студента, автомобиль и т.д. Описав класс, мы можем создать его экземпляр – объект. Объект – это уже конкретный представитель класса. 

### Семантическая связь с понятиями класса и объекта
Коллекция является классом, поэтому необходимо объявить экземпляр класса перед добавлением в коллекцию элементов. Массив же относится к объектам.

## Использование в ВКР

### Массивы

Ни списки, ни коллекции в программе ВКР не используются, зато массивы используются в большом количестве. Собственно, единственными данными, которые поступают на вход, является массив с результатами топографической съемки. В следующем примере данные хранятся в двумерном массиве с шириной 8. Длина массива зависит от количества отснятых участков (то есть, от размера пещеры).  Данный массив представлен на рисунке 5.

![pic5](https://github.com/isagel/popova-page/blob/master/image.png?raw=true)

_Рис. 5. Массив данных

Здесь первый столбец – это номер первого пикета, второй – номер второго пикета, третий – расстояние между пикетами, четвертый –горизонтальный угол, пятый – вертикальный, шестой и седьмой – соответственно расстояние до левой стены, восьмой – расстояние от пола до потолка. Следует учесть, что в зависимости от съемки, количество столбцов может различаться (например, где-то могут не измерять высоту, иногда некоторые расстояния измерить просто невозможно).

На основании этого массива строятся R-функции и вычисляются  координаты точек. Следует отметить, что мы не можем вычислять координаты по порядку, необходимо учитывать наличие развилок и колец. В некоторых примерах данные могут идти не по порядку. Все эти проблемы решались В программе ВКР. Собственно, около половины кода - это работа с массивами (Рис. 6).

![pic6](https://github.com/isagel/popova-page/blob/master/ovch1.png?raw=true)

_Рис. 6. Работа с элементами массива


### Список использованных источников:
1. [Википедия](https://ru.wikipedia.org)
2. [Что такое класс в ООП]( https://vscode.ru/articles/chto-takoe-klass-v-oop.html)
3. [Объекты и классы]( http://ermak.cs.nstu.ru/cprog/html/101.htm)
